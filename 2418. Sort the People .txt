//Question
You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.

For each index i, names[i] and heights[i] denote the name and height of the ith person.

Return names sorted in descending order by the people's heights.

 

Example 1:

Input: names = ["Mary","John","Emma"], heights = [180,165,170]
Output: ["Mary","Emma","John"]
Explanation: Mary is the tallest, followed by Emma and John.
Example 2:

Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]
Output: ["Bob","Alice","Bob"]
Explanation: The first Bob is the tallest, followed by Alice and the second Bob.
 

Constraints:

n == names.length == heights.length
1 <= n <= 103
1 <= names[i].length <= 20
1 <= heights[i] <= 105
names[i] consists of lower and upper case English letters.
All the values of heights are distinct.

//Solution
import java.util.Comparator;
import java.util.SortedMap;
import java.util.TreeMap;
class Solution {
    public String[] sortPeople(String[] names, int[] heights) {
        int k=0;
        String[] str = new String[names.length];
        SortedMap<Integer,String> map = new TreeMap<>(new Comparator<Integer>(){
            public int compare(Integer i1, Integer i2) {
                return i2-i1;
            }
        });
        for(int i=0;i<names.length;i++){
            map.put(heights[i],names[i]);
        }
        System.out.println(map);
        for(Map.Entry entry : map.entrySet()){
            str[k++]=(String)entry.getValue();
        }
        return str;
    }
}