📌 Question

Given two strings needle 🪡 and haystack 🪵, return the index of the first occurrence of needle inside haystack. If not found, return -1.

Examples:
👉 haystack = "sadbutsad", needle = "sad" → Output = 0
👉 haystack = "leetcode", needle = "leeto" → Output = -1

Constraints:

1 <= haystack.length, needle.length <= 10^4

All lowercase English letters ✅

💡 Intuition

Imagine 📖 haystack is a big book and 🔎 needle is a small word we’re searching.

We need to check each position in haystack and see if needle starts matching from there.

Return the first 🎯 index where it matches.

If not found → return -1 🚫.

🛠 Approach
1️⃣ Brute Force (Sliding Window 🔍)

Loop through each index of haystack 🪵.

At each index, compare substring of length = needle.length().

If matches → return index.

Time Complexity: O(n * m) (n = haystack length, m = needle length).

2️⃣ Built-in Function 📦 (Cheat 😅)

Just use haystack.indexOf(needle).

Java already has optimized search.

Time Complexity: O(n) average.

3️⃣ KMP Algorithm 🚀 (Optimal)

Preprocess needle into an LPS (Longest Prefix Suffix) array.

Then scan haystack with needle in O(n + m) time.

Best for large strings 📏.

👨‍💻 Solutions (Java)
✅ Brute Force Solution
class Solution {
    public int strStr(String haystack, String needle) {
        int n = haystack.length();
        int m = needle.length();

        for (int i = 0; i <= n - m; i++) {
            if (haystack.substring(i, i + m).equals(needle)) {
                return i; // 🎯 first match
            }
        }
        return -1; // 🚫 not found
    }
}

✅ Built-in Solution (Quick Trick 😎)
class Solution {
    public int strStr(String haystack, String needle) {
        return haystack.indexOf(needle); // 📦 directly use Java function
    }
}

✅ KMP (Optimal 🚀)
class Solution {
    public int strStr(String haystack, String needle) {
        int n = haystack.length(), m = needle.length();
        if (m == 0) return 0;

        // Step 1: Build LPS array 🧩
        int[] lps = new int[m];
        for (int i = 1, len = 0; i < m; ) {
            if (needle.charAt(i) == needle.charAt(len)) {
                lps[i++] = ++len;
            } else if (len > 0) {
                len = lps[len - 1];
            } else {
                lps[i++] = 0;
            }
        }

        // Step 2: Match haystack vs needle 🔍
        for (int i = 0, j = 0; i < n; ) {
            if (haystack.charAt(i) == needle.charAt(j)) {
                i++; j++;
                if (j == m) return i - j; // 🎯 found
            } else if (j > 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
        return -1; // 🚫 not found
    }
}

🎯 Final Takeaways

For interviews → Explain Brute Force ➝ Built-in ➝ KMP.

For real coding → haystack.indexOf(needle) is enough 😉.

KMP is important conceptually (pattern searching).