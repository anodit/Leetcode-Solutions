🧠 Question:

You are given an integer array height of length n.
There are n vertical lines drawn such that the two endpoints of the iᵗʰ line are at (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

💡 You may not slant the container.

🧾 Example 1:

Input:

height = [1,8,6,2,5,4,8,3,7]


Output:

49


Explanation:
The lines at indices 1 and 8 form the container.
Area = min(8, 7) * (8 - 1) = 7 * 7 = 49.

🧾 Example 2:

Input:

height = [1,1]


Output:

1

⚙️ Constraints:
n == height.length
2 <= n <= 10^5
0 <= height[i] <= 10^4

💻 Solution(s)
🚀 1️⃣ Brute Force Approach (O(N²))
class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int maxWater = 0;

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                int minHeight = Math.min(height[i], height[j]);
                int width = j - i;
                int area = minHeight * width;
                maxWater = Math.max(maxWater, area);
            }
        }
        return maxWater;
    }
}

🧭 Approach:

Check all possible pairs (i, j) where i < j.

Compute area for each pair:
area = min(height[i], height[j]) * (j - i)

Keep track of the maximum area found.

🧠 Intuition:

We are brute-forcing all combinations to ensure we don’t miss any possible container.
However, since we check every pair, time complexity is O(N²) — not efficient for large n.

⚡ 2️⃣ Optimal Two-Pointer Approach (O(N))
class Solution {
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int maxWater = 0;

        while (left < right) {
            int minHeight = Math.min(height[left], height[right]);
            int width = right - left;
            int area = minHeight * width;
            maxWater = Math.max(maxWater, area);

            // Move the pointer with smaller height inward
            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }
        return maxWater;
    }
}

🧭 Approach:

Use two pointers, one at the start (left) and one at the end (right).

Calculate area for the current pair of lines.

To possibly find a taller line:

Move the smaller height pointer inward because it limits the height.

Continue until left and right meet.

🧠 Intuition (with emoji):

💧 The water stored is limited by the shorter line and the distance between lines.
🏃 Moving the taller line won’t help — area will only decrease due to less width.
📈 So we move the shorter line inward, hoping to find a taller one and thus increase area.

⏱️ Complexity Analysis:
Approach	Time Complexity	Space Complexity
Brute Force	O(N²)	O(1)
Two Pointer	✅ O(N)	O(1)
🔍 Dry Run (for Two-Pointer Approach)

Input: [1,8,6,2,5,4,8,3,7]

Left	Right	height[L]	height[R]	min	width	area	maxWater
0	8	1	7	1	8	8	8
1	8	8	7	7	7	49	49 ✅
1	7	8	3	3	6	18	49
1	6	8	8	8	5	40	49
1	5	8	4	4	4	16	49
1	4	8	5	5	3	15	49
1	3	8	2	2	2	4	49
1	2	8	6	6	1	6	49

✅ Max Water = 49

🎯 Final Answer:

Output: 49
Best Time Complexity: O(N)
Technique: Two Pointer
Concepts Tested: Greedy + Two Pointer Optimization