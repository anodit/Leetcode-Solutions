### **Question**

Given an integer array nums, return **true ✅** if any value appears **at least twice** in the array, and return **false ❌** if every element is distinct.

**Example 1:**
👉 Input: nums = \[1,2,3,1]
✅ Output: true
📌 Explanation: Element `1` occurs at indices `0` and `3`.

**Example 2:**
👉 Input: nums = \[1,2,3,4]
❌ Output: false
📌 Explanation: All elements are distinct.

**Example 3:**
👉 Input: nums = \[1,1,1,3,3,4,3,2,4,2]
✅ Output: true

**Constraints:**

* 1 <= nums.length <= 10^5
* -10^9 <= nums\[i] <= 10^9

---

### **Solution 1: Brute Force 🔁**

```java
public class Solution {
    public boolean containsDuplicate(int[] nums) {
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] == nums[j]) {
                    return true;
                }
            }
        }
        return false;
    }
}
```

**Approach:** Compare each element with all others.
**Intuition:** If any two are equal, return true.
**⏱ Time Complexity:** O(n²)
**💾 Space Complexity:** O(1)

---

### **Solution 2: Sorting 📊**

```java
import java.util.Arrays;

public class Solution {
    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                return true;
            }
        }
        return false;
    }
}
```

**Approach:** Sort the array, then check consecutive elements.
**Intuition:** Duplicates must be adjacent after sorting.
**⏱ Time Complexity:** O(n log n)
**💾 Space Complexity:** O(1) or O(log n) (depending on sorting algorithm).

---

### **Solution 3: HashSet ✅ (Optimal)**

```java
import java.util.HashSet;

public class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            if (set.contains(num)) {
                return true;
            }
            set.add(num);
        }
        return false;
    }
}
```

**Approach:** Use a HashSet to track seen numbers.
**Intuition:** If a number already exists in the set → duplicate found.
**⏱ Time Complexity:** O(n)
**💾 Space Complexity:** O(n)
