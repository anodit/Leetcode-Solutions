---

# 📄 Problem: Remove Duplicates from Sorted Array

---

## ❓ Question

Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates **in-place** such that each unique element appears only once.

* Return the number of unique elements `k`.
* Modify `nums` such that first `k` elements contain the unique elements.
* Elements beyond `k` can be ignored (`_`).

---

## 📝 Example

👉 Input:
`nums = [1,1,2]`

👉 Output:
`2, nums = [1,2,_]`

---

👉 Input:
`nums = [0,0,1,1,1,2,2,3,3,4]`

👉 Output:
`5, nums = [0,1,2,3,4,_,_,_,_,_]`

---

## ⚡ Constraints

* `1 <= nums.length <= 3 * 10^4`
* `-100 <= nums[i] <= 100`
* `nums` is **sorted** ✅

---

## 💡 Intuition

Since the array is **sorted**, all duplicates will be **next to each other** 🔗.
So, we can use a **two-pointer technique** 👣:

* One pointer (`i`) scans the array.
* Another pointer (`k`) keeps track of the position to store the **next unique element**.

---

## 🚀 Approach

1. Start with `k = 1` (first element is always unique ✨).
2. Loop through the array from index `1`.
3. If `nums[i] != nums[i-1]` 👉 copy it to `nums[k]` and increment `k`.
4. Return `k`.

---

## ✅ Solution (Java – O(n))

```java
class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) return 0;  // 🛑 Edge case
        
        int k = 1; // 🖊️ Position for next unique element
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {  // 🎯 Found unique
                nums[k] = nums[i];         // ✍️ Place at position k
                k++;
            }
        }
        return k; // 📦 Return count of unique elements
    }
}
```

---

## ⏱️ Complexity

* **Time:** `O(n)` → Single pass 🔄
* **Space:** `O(1)` → In-place, no extra memory 💾

---

## 🔍 Dry Run (Example: `[0,0,1,1,1,2,2,3,3,4]`)

| i 👆 | nums\[i] 🔢 | nums\[i-1] | Action ✍️             | nums (so far) 🧩       | k 📦 |
| ---- | ----------- | ---------- | --------------------- | ---------------------- | ---- |
| 1    | 0           | 0          | Duplicate ❌           | \[0,0,1,1,1,2,2,3,3,4] | 1    |
| 2    | 1           | 0          | Unique ✅ → nums\[1]=1 | \[0,1,1,1,1,2,2,3,3,4] | 2    |
| 3    | 1           | 1          | Duplicate ❌           | \[0,1,1,1,1,2,2,3,3,4] | 2    |
| 4    | 1           | 1          | Duplicate ❌           | \[0,1,1,1,1,2,2,3,3,4] | 2    |
| 5    | 2           | 1          | Unique ✅ → nums\[2]=2 | \[0,1,2,1,1,2,2,3,3,4] | 3    |
| 6    | 2           | 2          | Duplicate ❌           | \[0,1,2,1,1,2,2,3,3,4] | 3    |
| 7    | 3           | 2          | Unique ✅ → nums\[3]=3 | \[0,1,2,3,1,2,2,3,3,4] | 4    |
| 8    | 3           | 3          | Duplicate ❌           | \[0,1,2,3,1,2,2,3,3,4] | 4    |
| 9    | 4           | 3          | Unique ✅ → nums\[4]=4 | \[0,1,2,3,4,2,2,3,3,4] | 5    |

👉 Final Answer: `k = 5`, `nums = [0,1,2,3,4,_,_,_,_,_]`
